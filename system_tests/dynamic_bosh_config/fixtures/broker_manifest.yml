---
name: ((broker_deployment_name))

releases:
- name: ((broker_release))
  version: ((odb_version))
- name: ((service_adapter_release))
  version: latest
- name: routing
  version: latest
- name: loggregator
  version: latest
- name: consul
  version: latest

stemcells:
- alias: jammy
  os: ((meta.stemcell.os))
  version: "((meta.stemcell.version))"

variables:
- name: broker_password
  type: password

instance_groups:
- name: broker
  networks:
  - name: ((meta.services_subnet))
  stemcell: jammy
  vm_extensions:
  - public_ip
  vm_type: ((meta.vm_type))
  azs: [((meta.az))]
  instances: 1
  jobs:
  - name: register-broker
    release: ((broker_release))
    properties:
      broker_name: ((broker_name))
      broker_uri: https://((broker_uri))
      cf:
        api_url: ((cf.api_url))
      disable_ssl_cert_verification: false
  - name: recreate-all-service-instances
    release: ((broker_release))
    properties: {}
  - name: delete-all-service-instances-and-deregister-broker
    properties:
      broker_name: ((broker_name))
      polling_interval_seconds: 10
    release: ((broker_release))
  - name: service-adapter
    properties:
      redis_instance_group_name: redis-server
    release: ((service_adapter_release))
  - name: broker
    release: ((broker_release))
    properties:
      disable_ssl_cert_verification: false
      expose_operational_errors: false
      password: ((broker_password))
      port: 8080
      shutdown_timeout_in_seconds: 10
      startup_banner: true
      use_stdin: true
      username: broker
      bosh:
        authentication:
          uaa:
            client_id: ((bosh.authentication.username))
            client_secret: ((bosh.authentication.password))
        root_ca_cert: ((bosh.root_ca_cert))
        url: ((bosh.url))
      cf:
        authentication:
          url: ((cf.uaa.url))
          client_credentials:
            client_id: ((cf.client_credentials.client_id))
            client_secret: ((cf.client_credentials.client_secret))
          user_credentials:
            password: ((cf.user_credentials.password))
            username: ((cf.user_credentials.username))
        root_ca_cert: ((cf.root_ca_cert))
        url: ((cf.api_url))
      service_catalog:
        bindable: true
        global_properties:
          persistence: true
        id: ((service_catalog_id))
        metadata:
          display_name: Redis
        plan_updatable: true
        plans:
        - name: redis-with-bosh-config
          plan_id: ((plan_id))
          metadata:
            bullets: []
            display_name: Redis with dynamic bosh config
          properties:
            persistence: false
            test_dynamic_bosh_config: true
          cf_service_access: enable
          description: Redis with dynamic bosh config
          instance_groups:
          - name: redis-server
            azs: [((meta.az))]
            instances: 1
            networks: [((meta.services_subnet))]
            vm_type: ((meta.vm_type))
        service_description: Redis Dedicated Instance
        service_name: ((service_catalog_service_name))
        tags: [pivotal, redis]
      service_deployment:
        releases:
        - jobs: [redis-server, health-check, cleanup-data]
          name: ((service_release))
          version: ((service_release_version))
        stemcell:
          os: ((meta.stemcell.os))
          version: "((meta.stemcell.version))"
  - name: route_registrar
    consumes:
      nats-tls:
        from: nats-tls
        deployment: ((cf.deployment_name))
    properties:
      nats:
        tls:
          enabled: true
          client_cert: ((nats.tls.certificate))
          client_key: ((nats.tls.private_key))
      route_registrar:
        routes:
        - name: ((broker_route_name))
          port: 8080
          registration_interval: 20s
          uris:
          - ((broker_uri))
    release: routing
  - name: metron_agent
    release: loggregator
    properties:
      loggregator:
        etcd:
          ca_cert: ((loggregator.etcd.ca_cert))
          machines:
          - cf-etcd.service.cf.internal
          require_ssl: true
        tls:
          ca_cert: ((loggregator.tls.ca_cert))
          metron:
            cert: ((loggregator.tls.metron.cert))
            key: ((loggregator.tls.metron.key))
      loggregator_endpoint:
        shared_secret: ((metron_endpoint.shared_secret))
      metron_agent:
        deployment: ((broker_deployment_name))
        etcd:
          client_cert: ((metron_agent.etcd.client_cert))
          client_key: ((metron_agent.etcd.client_key))
        protocols:
        - tls
        tls:
          metron:
            cert: ((metron_agent.tls.metron.cert))
            key: ((metron_agent.tls.metron.key))
      metron_endpoint:
        shared_secret: ((metron_endpoint.shared_secret))
  - name: consul_agent
    consumes:
      consul_client:
        deployment: ((cf.deployment_name))
        from: consul_client_link
      consul_common:
        deployment: ((cf.deployment_name))
        from: consul_common_link
      consul_server: nil
    release: consul

update:
  canaries: 1
  canary_watch_time: 3000-180000
  max_in_flight: 4
  update_watch_time: 3000-180000
