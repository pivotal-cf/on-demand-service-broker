// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"log"
	"sync"

	"github.com/pivotal-cf/brokerapi/v9/domain"
	"github.com/pivotal-cf/on-demand-service-broker/broker"
	"github.com/pivotal-cf/on-demand-services-sdk/bosh"
	"github.com/pivotal-cf/on-demand-services-sdk/serviceadapter"
)

type FakeServiceAdapterClient struct {
	CreateBindingStub        func(string, bosh.BoshVMs, []byte, map[string]interface{}, map[string]string, map[string]string, *log.Logger) (serviceadapter.Binding, error)
	createBindingMutex       sync.RWMutex
	createBindingArgsForCall []struct {
		arg1 string
		arg2 bosh.BoshVMs
		arg3 []byte
		arg4 map[string]interface{}
		arg5 map[string]string
		arg6 map[string]string
		arg7 *log.Logger
	}
	createBindingReturns struct {
		result1 serviceadapter.Binding
		result2 error
	}
	createBindingReturnsOnCall map[int]struct {
		result1 serviceadapter.Binding
		result2 error
	}
	DeleteBindingStub        func(string, bosh.BoshVMs, []byte, map[string]interface{}, map[string]string, map[string]string, *log.Logger) error
	deleteBindingMutex       sync.RWMutex
	deleteBindingArgsForCall []struct {
		arg1 string
		arg2 bosh.BoshVMs
		arg3 []byte
		arg4 map[string]interface{}
		arg5 map[string]string
		arg6 map[string]string
		arg7 *log.Logger
	}
	deleteBindingReturns struct {
		result1 error
	}
	deleteBindingReturnsOnCall map[int]struct {
		result1 error
	}
	GenerateDashboardUrlStub        func(string, serviceadapter.Plan, []byte, *log.Logger) (string, error)
	generateDashboardUrlMutex       sync.RWMutex
	generateDashboardUrlArgsForCall []struct {
		arg1 string
		arg2 serviceadapter.Plan
		arg3 []byte
		arg4 *log.Logger
	}
	generateDashboardUrlReturns struct {
		result1 string
		result2 error
	}
	generateDashboardUrlReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GeneratePlanSchemaStub        func(serviceadapter.Plan, *log.Logger) (domain.ServiceSchemas, error)
	generatePlanSchemaMutex       sync.RWMutex
	generatePlanSchemaArgsForCall []struct {
		arg1 serviceadapter.Plan
		arg2 *log.Logger
	}
	generatePlanSchemaReturns struct {
		result1 domain.ServiceSchemas
		result2 error
	}
	generatePlanSchemaReturnsOnCall map[int]struct {
		result1 domain.ServiceSchemas
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceAdapterClient) CreateBinding(arg1 string, arg2 bosh.BoshVMs, arg3 []byte, arg4 map[string]interface{}, arg5 map[string]string, arg6 map[string]string, arg7 *log.Logger) (serviceadapter.Binding, error) {
	var arg3Copy []byte
	if arg3 != nil {
		arg3Copy = make([]byte, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.createBindingMutex.Lock()
	ret, specificReturn := fake.createBindingReturnsOnCall[len(fake.createBindingArgsForCall)]
	fake.createBindingArgsForCall = append(fake.createBindingArgsForCall, struct {
		arg1 string
		arg2 bosh.BoshVMs
		arg3 []byte
		arg4 map[string]interface{}
		arg5 map[string]string
		arg6 map[string]string
		arg7 *log.Logger
	}{arg1, arg2, arg3Copy, arg4, arg5, arg6, arg7})
	stub := fake.CreateBindingStub
	fakeReturns := fake.createBindingReturns
	fake.recordInvocation("CreateBinding", []interface{}{arg1, arg2, arg3Copy, arg4, arg5, arg6, arg7})
	fake.createBindingMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceAdapterClient) CreateBindingCallCount() int {
	fake.createBindingMutex.RLock()
	defer fake.createBindingMutex.RUnlock()
	return len(fake.createBindingArgsForCall)
}

func (fake *FakeServiceAdapterClient) CreateBindingCalls(stub func(string, bosh.BoshVMs, []byte, map[string]interface{}, map[string]string, map[string]string, *log.Logger) (serviceadapter.Binding, error)) {
	fake.createBindingMutex.Lock()
	defer fake.createBindingMutex.Unlock()
	fake.CreateBindingStub = stub
}

func (fake *FakeServiceAdapterClient) CreateBindingArgsForCall(i int) (string, bosh.BoshVMs, []byte, map[string]interface{}, map[string]string, map[string]string, *log.Logger) {
	fake.createBindingMutex.RLock()
	defer fake.createBindingMutex.RUnlock()
	argsForCall := fake.createBindingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7
}

func (fake *FakeServiceAdapterClient) CreateBindingReturns(result1 serviceadapter.Binding, result2 error) {
	fake.createBindingMutex.Lock()
	defer fake.createBindingMutex.Unlock()
	fake.CreateBindingStub = nil
	fake.createBindingReturns = struct {
		result1 serviceadapter.Binding
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceAdapterClient) CreateBindingReturnsOnCall(i int, result1 serviceadapter.Binding, result2 error) {
	fake.createBindingMutex.Lock()
	defer fake.createBindingMutex.Unlock()
	fake.CreateBindingStub = nil
	if fake.createBindingReturnsOnCall == nil {
		fake.createBindingReturnsOnCall = make(map[int]struct {
			result1 serviceadapter.Binding
			result2 error
		})
	}
	fake.createBindingReturnsOnCall[i] = struct {
		result1 serviceadapter.Binding
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceAdapterClient) DeleteBinding(arg1 string, arg2 bosh.BoshVMs, arg3 []byte, arg4 map[string]interface{}, arg5 map[string]string, arg6 map[string]string, arg7 *log.Logger) error {
	var arg3Copy []byte
	if arg3 != nil {
		arg3Copy = make([]byte, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.deleteBindingMutex.Lock()
	ret, specificReturn := fake.deleteBindingReturnsOnCall[len(fake.deleteBindingArgsForCall)]
	fake.deleteBindingArgsForCall = append(fake.deleteBindingArgsForCall, struct {
		arg1 string
		arg2 bosh.BoshVMs
		arg3 []byte
		arg4 map[string]interface{}
		arg5 map[string]string
		arg6 map[string]string
		arg7 *log.Logger
	}{arg1, arg2, arg3Copy, arg4, arg5, arg6, arg7})
	stub := fake.DeleteBindingStub
	fakeReturns := fake.deleteBindingReturns
	fake.recordInvocation("DeleteBinding", []interface{}{arg1, arg2, arg3Copy, arg4, arg5, arg6, arg7})
	fake.deleteBindingMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceAdapterClient) DeleteBindingCallCount() int {
	fake.deleteBindingMutex.RLock()
	defer fake.deleteBindingMutex.RUnlock()
	return len(fake.deleteBindingArgsForCall)
}

func (fake *FakeServiceAdapterClient) DeleteBindingCalls(stub func(string, bosh.BoshVMs, []byte, map[string]interface{}, map[string]string, map[string]string, *log.Logger) error) {
	fake.deleteBindingMutex.Lock()
	defer fake.deleteBindingMutex.Unlock()
	fake.DeleteBindingStub = stub
}

func (fake *FakeServiceAdapterClient) DeleteBindingArgsForCall(i int) (string, bosh.BoshVMs, []byte, map[string]interface{}, map[string]string, map[string]string, *log.Logger) {
	fake.deleteBindingMutex.RLock()
	defer fake.deleteBindingMutex.RUnlock()
	argsForCall := fake.deleteBindingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7
}

func (fake *FakeServiceAdapterClient) DeleteBindingReturns(result1 error) {
	fake.deleteBindingMutex.Lock()
	defer fake.deleteBindingMutex.Unlock()
	fake.DeleteBindingStub = nil
	fake.deleteBindingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceAdapterClient) DeleteBindingReturnsOnCall(i int, result1 error) {
	fake.deleteBindingMutex.Lock()
	defer fake.deleteBindingMutex.Unlock()
	fake.DeleteBindingStub = nil
	if fake.deleteBindingReturnsOnCall == nil {
		fake.deleteBindingReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteBindingReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceAdapterClient) GenerateDashboardUrl(arg1 string, arg2 serviceadapter.Plan, arg3 []byte, arg4 *log.Logger) (string, error) {
	var arg3Copy []byte
	if arg3 != nil {
		arg3Copy = make([]byte, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.generateDashboardUrlMutex.Lock()
	ret, specificReturn := fake.generateDashboardUrlReturnsOnCall[len(fake.generateDashboardUrlArgsForCall)]
	fake.generateDashboardUrlArgsForCall = append(fake.generateDashboardUrlArgsForCall, struct {
		arg1 string
		arg2 serviceadapter.Plan
		arg3 []byte
		arg4 *log.Logger
	}{arg1, arg2, arg3Copy, arg4})
	stub := fake.GenerateDashboardUrlStub
	fakeReturns := fake.generateDashboardUrlReturns
	fake.recordInvocation("GenerateDashboardUrl", []interface{}{arg1, arg2, arg3Copy, arg4})
	fake.generateDashboardUrlMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceAdapterClient) GenerateDashboardUrlCallCount() int {
	fake.generateDashboardUrlMutex.RLock()
	defer fake.generateDashboardUrlMutex.RUnlock()
	return len(fake.generateDashboardUrlArgsForCall)
}

func (fake *FakeServiceAdapterClient) GenerateDashboardUrlCalls(stub func(string, serviceadapter.Plan, []byte, *log.Logger) (string, error)) {
	fake.generateDashboardUrlMutex.Lock()
	defer fake.generateDashboardUrlMutex.Unlock()
	fake.GenerateDashboardUrlStub = stub
}

func (fake *FakeServiceAdapterClient) GenerateDashboardUrlArgsForCall(i int) (string, serviceadapter.Plan, []byte, *log.Logger) {
	fake.generateDashboardUrlMutex.RLock()
	defer fake.generateDashboardUrlMutex.RUnlock()
	argsForCall := fake.generateDashboardUrlArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeServiceAdapterClient) GenerateDashboardUrlReturns(result1 string, result2 error) {
	fake.generateDashboardUrlMutex.Lock()
	defer fake.generateDashboardUrlMutex.Unlock()
	fake.GenerateDashboardUrlStub = nil
	fake.generateDashboardUrlReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceAdapterClient) GenerateDashboardUrlReturnsOnCall(i int, result1 string, result2 error) {
	fake.generateDashboardUrlMutex.Lock()
	defer fake.generateDashboardUrlMutex.Unlock()
	fake.GenerateDashboardUrlStub = nil
	if fake.generateDashboardUrlReturnsOnCall == nil {
		fake.generateDashboardUrlReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generateDashboardUrlReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceAdapterClient) GeneratePlanSchema(arg1 serviceadapter.Plan, arg2 *log.Logger) (domain.ServiceSchemas, error) {
	fake.generatePlanSchemaMutex.Lock()
	ret, specificReturn := fake.generatePlanSchemaReturnsOnCall[len(fake.generatePlanSchemaArgsForCall)]
	fake.generatePlanSchemaArgsForCall = append(fake.generatePlanSchemaArgsForCall, struct {
		arg1 serviceadapter.Plan
		arg2 *log.Logger
	}{arg1, arg2})
	stub := fake.GeneratePlanSchemaStub
	fakeReturns := fake.generatePlanSchemaReturns
	fake.recordInvocation("GeneratePlanSchema", []interface{}{arg1, arg2})
	fake.generatePlanSchemaMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceAdapterClient) GeneratePlanSchemaCallCount() int {
	fake.generatePlanSchemaMutex.RLock()
	defer fake.generatePlanSchemaMutex.RUnlock()
	return len(fake.generatePlanSchemaArgsForCall)
}

func (fake *FakeServiceAdapterClient) GeneratePlanSchemaCalls(stub func(serviceadapter.Plan, *log.Logger) (domain.ServiceSchemas, error)) {
	fake.generatePlanSchemaMutex.Lock()
	defer fake.generatePlanSchemaMutex.Unlock()
	fake.GeneratePlanSchemaStub = stub
}

func (fake *FakeServiceAdapterClient) GeneratePlanSchemaArgsForCall(i int) (serviceadapter.Plan, *log.Logger) {
	fake.generatePlanSchemaMutex.RLock()
	defer fake.generatePlanSchemaMutex.RUnlock()
	argsForCall := fake.generatePlanSchemaArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceAdapterClient) GeneratePlanSchemaReturns(result1 domain.ServiceSchemas, result2 error) {
	fake.generatePlanSchemaMutex.Lock()
	defer fake.generatePlanSchemaMutex.Unlock()
	fake.GeneratePlanSchemaStub = nil
	fake.generatePlanSchemaReturns = struct {
		result1 domain.ServiceSchemas
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceAdapterClient) GeneratePlanSchemaReturnsOnCall(i int, result1 domain.ServiceSchemas, result2 error) {
	fake.generatePlanSchemaMutex.Lock()
	defer fake.generatePlanSchemaMutex.Unlock()
	fake.GeneratePlanSchemaStub = nil
	if fake.generatePlanSchemaReturnsOnCall == nil {
		fake.generatePlanSchemaReturnsOnCall = make(map[int]struct {
			result1 domain.ServiceSchemas
			result2 error
		})
	}
	fake.generatePlanSchemaReturnsOnCall[i] = struct {
		result1 domain.ServiceSchemas
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceAdapterClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createBindingMutex.RLock()
	defer fake.createBindingMutex.RUnlock()
	fake.deleteBindingMutex.RLock()
	defer fake.deleteBindingMutex.RUnlock()
	fake.generateDashboardUrlMutex.RLock()
	defer fake.generateDashboardUrlMutex.RUnlock()
	fake.generatePlanSchemaMutex.RLock()
	defer fake.generatePlanSchemaMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceAdapterClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ broker.ServiceAdapterClient = new(FakeServiceAdapterClient)
